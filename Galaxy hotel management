#include <iostream>
#include <string>
using namespace std;

class Room {
public:
    int roomID;
    string type; // "Single", "Double", "Suite"
    string status; // "Occupied", "Booked", "Ready", "Unavailable", "Working"
    double price; // Price of the room
    Room* next;
    Room* prev;

    Room(int id, string t, string s, double prize) {
        roomID = id;
        type = t;
        status = s;
        price = prize;
        next = nullptr;
        prev = nullptr;
    }
};

class Floor {
public:
    int floorID;
    Room* rooms;

    Floor(int ids) {
        floorID = ids;
        rooms = nullptr;
    }
};

class Hotel {
public:
    Floor** floors;
    int numfloors;
    int numroomsperfloor;

    Hotel(int F, int N) {
        numfloors = F;
        numroomsperfloor = N;
        floors = new Floor*[F];

        int countready  = 0;
        int countbooked = 0;

        for (int i = 0; i < F; i++) {
            floors[i] = new Floor(i + 1);
            for (int j = 0; j < N; j++) {
                string type;
                double price;
                switch (j % 3) {
                    case 0:
                        type = "Single";
                        price = 12000.0;
                        break;
                    case 1:
                        type = "Double";
                        price = 18000.0;
                        break;
                    case 2:
                        type = "Suite";
                        price = 25000.0;
                        break;
                }
                string status;
                if (countready < 30) {
                    status = "Ready";
                    countready++;
                } else if (countbooked < 18) {
                    status = "Booked";
                    countbooked++;
                } else {
                    status = "Working";
                }
                Room* newroom = new Room((i * N) + j + 1, type, status, price);
                addroom(floors[i], newroom);
            }
        }
    }

    void addroom(Floor* floor, Room* room) {
        if (floor->rooms == nullptr) {
            floor->rooms = room;
            room->next = room;
            room->prev = room;
        } else {
            Room* tail = floor->rooms->prev;
            tail->next = room;
            room->prev = tail;
            room->next = floor->rooms;
            floor->rooms->prev = room;
        }
    }

    void displayroom() {
        char Membership;
        cout << "Do you have a membership? (y/n): ";
        cin >> Membership;

        for (int i = 0; i < numfloors; i++) {
            cout << "Floor " << floors[i]->floorID << ":\n";
            Room* temp = floors[i]->rooms;
            if (temp != nullptr) {
                do {
                    double displayprice = temp->price;
                    if (Membership == 'y' || Membership == 'Y') {
                        displayprice *= 0.75; // Apply 25% discount
                    }
                    cout << "Room ID: " << temp->roomID
                         << ", Type: " << temp->type
                         << ", Status: " << temp->status
                         << ", Price: " << displayprice << " pkr" << endl;
                    temp = temp->next;
                } while (temp != floors[i]->rooms);
            }
        }
    }

    int countbookedroom() {
        int count = 0;
        for (int i = 0; i < numfloors; i++) {
            Room* temp = floors[i]->rooms;
            if (temp != nullptr) {
                do {
                    if (temp->status == "Booked") count++;
                    temp = temp->next;
                } while (temp != floors[i]->rooms);
            }
        }
        return count;
    }

    void displayavailableroombytype(string roomtype) {
        for (int i = 0; i < numfloors; i++) {
            Room* temp = floors[i]->rooms;
            if (temp != nullptr) {
                do {
                    if (temp->type == roomtype && temp->status == "Ready") {
                        cout << "Room ID: " << temp->roomID
                             << ", Type: " << temp->type
                             << ", Price: " << temp->price << " pkr" << endl;
                    }
                    temp = temp->next;
                } while (temp != floors[i]->rooms);
            }
        }
    }

    double getroomprice(string roomtype) {
        if (roomtype == "Single") {
            return 12000.0;
        } else if (roomtype == "Double") {
            return 18000.0;
        } else if (roomtype == "Suite") {
            return 25000.0;
        }
        return 0.0; // Default case
    }
};

class BookingRequest {
public:
    string customername;
    string roomtype;
    int nights;
    bool highpriority;
    int roomid; // Added roomID to store the assigned room ID

    BookingRequest(string name, string type, int n, bool priority, int roomID = -1) {
        customername = name;
        roomtype = type;
        nights = n;
        highpriority = priority;
        roomid = roomID; // Initialize roomID
    }
};
class Node {
        public:
        BookingRequest* request;
        Node* next;
    };
    
class BookingQueue {
private:
    
    Node* front;
    Node* rear;

public:
    BookingQueue() {
        front = rear = nullptr;
    }

    void enqueue(BookingRequest* request) {
        Node* temp = new Node();
        temp->request = request;
        temp->next = nullptr;
        if (rear == nullptr) {
            front = rear = temp;
            return;
        }
        rear->next = temp;
        rear = temp;
    }

    BookingRequest* dequeue() {
        if (front == nullptr)
            return nullptr;
        Node* temp = front;
        front = front->next;
        if (front == nullptr)
            rear = nullptr;
        BookingRequest* request = temp->request;
        delete temp;
        return request;
    }

    bool isEmpty() {
        return front == nullptr;
    }

    void displayQueue() {
        Node* temp = front;
        while (temp != nullptr) {
            cout << temp->request->customername << " wants a " << temp->request->roomtype
                 << " room for " << temp->request->nights << " nights"
                 << endl;
            temp = temp->next;
        }
    }
};

class BookingRecord {
public:
    string customername;
    int roomID;
    int nights;

    BookingRecord(string name, int ID, int n) {
        customername = name;
        roomID = ID;
        nights = n;
    }
};

class BookingStack {
private:
    class Node {
        public:
        BookingRecord* record;
        Node* next;
    };
    Node* top;

public:
    BookingStack() {
        top = nullptr;
    }

    void push(BookingRecord* record) {
        Node* temp = new Node();
        temp->record = record;
        temp->next = top;
        top = temp;
    }

    BookingRecord* pop() {
        if (top == nullptr)
            return nullptr;
        Node* temp = top;
        top = top->next;
        BookingRecord* record = temp->record;
        delete temp;
        return record;
    }

    bool isEmpty() {
        return top == nullptr;
    }

    void displaystack() {
        Node* temp = top;
        while (temp != nullptr) {
            cout << "Customer: " << temp->record->customername << ", Room ID: " << temp->record->roomID << ", Nights: " << temp->record->nights << endl;
            temp = temp->next;
        }
    }
};

void displaymenu() {
    cout<<"     GALAXY HOTEL MANAGMENT SYSTEM    "<<endl;
    cout << "               Menu:                    "<<endl;
    cout << "1. Display Rooms"<<endl;
    cout << "2. Count Booked Rooms"<<endl;
    cout << "3. Display Available Rooms by Type"<<endl;
    cout << "4. Add Booking Request"<<endl;
    cout << "5. Display Booking Queue"<<endl;
    cout << "6. Process Booking Requests"<<endl;
    cout << "7. Add Booking Record"<<endl;
    cout << "8. Cancel Last Booking"<<endl;
    cout << "9. Display Booking History"<<endl;
    cout << "10. Exit"<<endl;
    cout << "Enter your choice: ";
}

int main() {
    Hotel hotel(5, 10); // 5 floors, 10 rooms each
    BookingQueue regularQueue;
    BookingQueue priorityQueue;
    BookingStack bookingHistory;

    // Fixed size for booking requests
    const int maxbookingrequest = 100;
    BookingRequest* bookingRequests[maxbookingrequest];
    int bookingrequestcount = 0;

    int choice;
    string customername, roomtype;
    int nights, roomID;

    do {
        displaymenu();
        cin >> choice;

        switch (choice) {
            case 1:
                hotel.displayroom();
                break;

            case 2:
                cout << "Booked Rooms: " << hotel.countbookedroom() << endl;
                break;

            case 3:
                cout << "Enter room type (Single/Double/Suite): ";
                cin >> roomtype;
                if (roomtype == "single") roomtype = "Single";
                else if (roomtype == "double") roomtype = "Double";
                else if (roomtype == "suite") roomtype = "Suite";
                cout << "Available Rooms:"<<endl;
                hotel.displayavailableroombytype(roomtype);
                break;

            case 4:
                for (int i = 1; i <= 1; i++) {
                    // Loop to enter up to 4 booking requests
                    cout << "Enter customer name: ";
                    cin >> customername;
                    cout << "Enter room type (Single/Double/Suite): ";
                    cin >> roomtype;
                    if (roomtype == "single") roomtype = "Single";
                    else if (roomtype == "double") roomtype = "Double";
                    else if (roomtype == "suite") roomtype = "Suite";

                    // Loop to validate the number of nights
                    do {
                        cout << "Enter number of nights: ";
                        cin >> nights;
                        if (nights > 30) {
                            cout << "Error: Booking is available for a maximum of 30 nights.\nPlease enter a valid number of nights "<<endl;
                        }
                    } while (nights > 30);

                    bool highpriority;
                    cout << "Is this a high-priority request? (1 for Yes, 0 for No): ";
                    cin >> highpriority;

                    // Create a new booking request and store it
                    if (bookingrequestcount < maxbookingrequest) {
                        BookingRequest* newrequest = new BookingRequest(customername, roomtype, nights, highpriority);
                        bookingRequests[bookingrequestcount++] = newrequest; // Store the request

                        if (highpriority) {
                            double originalPrice = hotel.getroomprice(roomtype);
                            double extracharges = originalPrice * 1.25;
                            cout << "High-priority request:"<<endl;
                            cout << "Room Type: " << roomtype << endl;
                            cout << "Extra charges: " << extracharges << " pkr"<<endl;
                            priorityQueue.enqueue(newrequest);
                        } else {
                            regularQueue.enqueue(newrequest);
                        }
                        cout << "Booking request added to the queue"<<endl;
                    } else {
                        cout << "Maximum booking requests reached"<<endl;
                    }
                }
                break;

            case 5:
                cout << "Priority Queue:"<<endl;
                priorityQueue.displayQueue();
                cout << "Regular Queue:"<<endl;
                regularQueue.displayQueue();
                break;

            case 6:
                // Process high-priority bookings first
                while (!priorityQueue.isEmpty()) {
                    BookingRequest* request = priorityQueue.dequeue();
                    bool roombooked = false;
                    for (int i = 0; i < hotel.numfloors; i++) {
                        Room* temp = hotel.floors[i]->rooms;
                        if (temp != nullptr) {
                            do {
                                if (temp->status == "Ready" && temp->type == request->roomtype) {
                                    temp->status = "Booked"; // Mark as booked
                                    request->roomid = temp->roomID;
                                    cout << "Processing high-priority booking for " << request->customername
                                         << " in Room ID: " << request->roomid << endl;
                                    bookingHistory.push(new BookingRecord(request->customername, request->roomid, request->nights));
                                    roombooked = true;
                                    break;
                                }
                                temp = temp->next;
                            } while (temp != hotel.floors[i]->rooms && !roombooked);
                        }
                        if (roombooked) break;
                    }
                    // Do not delete request here, keep it for later display
                }

                // Process regular bookings
                while (!regularQueue.isEmpty()) {
                    BookingRequest* request = regularQueue.dequeue();
                    bool roombooked = false;
                    for (int i = 0; i < hotel.numfloors; i++) {
                        Room* temp = hotel.floors[i]->rooms;
                        if (temp != nullptr) {
                            do {
                                if (temp->status == "Ready" && temp->type == request->roomtype) {
                                    temp->status = "Booked"; // Mark as booked
                                    request->roomid = temp->roomID;
                                    cout << "Processing regular booking for " << request->customername
                                         << " in Room ID: " << request->roomid << endl;
                                    bookingHistory.push(new BookingRecord(request->customername, request->roomid, request->nights));
                                    roombooked = true;
                                    break;
                                }
                                temp = temp->next;
                            } while (temp != hotel.floors[i]->rooms && !roombooked);
                        }
                        if (roombooked) break;
                    }
                    // Do not delete request here, keep it for later display
                }
                break;

            case 7:
                cout << "Enter customer name: ";
                cin >> customername;
                cout << "Enter room ID: ";
                cin >> roomID;
                cout << "Enter number of nights: ";
                cin >> nights;

                {
                    bool roomfound = false; // Declare roomFound inside case
                    for (int i = 0; i < hotel.numfloors; i++) {
                        Room* temp = hotel.floors[i]->rooms;
                        if (temp != nullptr) {
                            do {
                                if (temp->roomID == roomID && temp->status != "Booked") {
                                    temp->status = "Booked";  // Mark room as booked
                                    roomfound = true;
                                    bookingHistory.push(new BookingRecord(customername, roomID, nights));
                                    cout << "Booking record added to the stack "<<endl;
                                    break;
                                }
                                temp = temp->next;
                            } while (temp != hotel.floors[i]->rooms);
                        }
                        if (roomfound) break;
                    }

                    if (!roomfound) {
                        cout << "Room ID " << roomID << " is not available or already booked "<<endl;
                    }
                }
                break;

            case 8:
                if (!bookingHistory.isEmpty()) {
                    BookingRecord* record = bookingHistory.pop();
                    cout << "Cancelled booking for " << record->customername << ", Room ID: " << record->roomID << endl;
                    delete record;
                } else {
                    cout << "No bookings to cancel "<<endl;
                }
                break;

            case 9:
                cout << "Booking History:\n";
                bookingHistory.displaystack();
                cout << "Booking Requests :"<<endl;
                for (int i = 0; i < bookingrequestcount; i++) {
                    if (bookingRequests[i] != nullptr) { // Check if the request is valid
                        cout << "Customer: " << bookingRequests[i]->customername
                             << ", Room Type: " << bookingRequests[i]->roomtype
                             << ", Nights: " << bookingRequests[i]->nights
                             << ", High Priority: " << (bookingRequests[i]->highpriority ? "Yes" : "No") << endl;
                    }
                }
                // Clear the booking requests after displaying
                for (int i = 0; i < bookingrequestcount; i++) {
                    delete bookingRequests[i];
                    bookingRequests[i] = nullptr; // Clear the pointer
                }
                bookingrequestcount = 0; // Reset the count
                break;

            case 10:
                cout << "Exiting program "<<endl;
                break;

            default:
                cout << "Invalid choice. Try again "<<endl;
        }
    } while (choice != 10);

    // Clean up dynamically allocated memory
    for (int i = 0; i < bookingrequestcount; i++) {
        delete bookingRequests[i];
    }

    return 0;
}
